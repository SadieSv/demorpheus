#pragma once

#include <stdlib.h>


enum Instruction {
	INSTRUCTION_TYPE_INVL, //invalid instruction
	INSTRUCTION_TYPE_ASC,       // aaa, aam, etc.
	INSTRUCTION_TYPE_DCL,       // daa, das
	INSTRUCTION_TYPE_MOV,
	INSTRUCTION_TYPE_MOVSR,     // segment register
	INSTRUCTION_TYPE_ADD,
 	INSTRUCTION_TYPE_XADD,
 	INSTRUCTION_TYPE_ADC,
 	INSTRUCTION_TYPE_SUB,
 	INSTRUCTION_TYPE_SBB,
 	INSTRUCTION_TYPE_INC,
 	INSTRUCTION_TYPE_DEC,
 	INSTRUCTION_TYPE_DIV,
 	INSTRUCTION_TYPE_IDIV,
 	INSTRUCTION_TYPE_NOT,
 	INSTRUCTION_TYPE_NEG,
 	INSTRUCTION_TYPE_STOS,
 	INSTRUCTION_TYPE_LODS,
 	INSTRUCTION_TYPE_SCAS,
 	INSTRUCTION_TYPE_MOVS,
 	INSTRUCTION_TYPE_MOVSX,
 	INSTRUCTION_TYPE_MOVZX,
 	INSTRUCTION_TYPE_CMPS,
 	INSTRUCTION_TYPE_SHX,       // signed/unsigned shift left/right
	INSTRUCTION_TYPE_ROX,       // signed/unsigned rot left/right
 	INSTRUCTION_TYPE_MUL,
 	INSTRUCTION_TYPE_IMUL,
 	INSTRUCTION_TYPE_EIMUL, // "extended" imul with 2-3 operands
 	INSTRUCTION_TYPE_XOR,
 	INSTRUCTION_TYPE_LEA,
 	INSTRUCTION_TYPE_XCHG,
 	INSTRUCTION_TYPE_CMP,
 	INSTRUCTION_TYPE_TEST,
 	INSTRUCTION_TYPE_PUSH,
 	INSTRUCTION_TYPE_AND,
 	INSTRUCTION_TYPE_OR,
 	INSTRUCTION_TYPE_POP,
 	INSTRUCTION_TYPE_JMP,
 	INSTRUCTION_TYPE_JMPC,      // conditional jump
 	INSTRUCTION_TYPE_JECXZ,
 	INSTRUCTION_TYPE_SETC,      // conditional byte set
 	INSTRUCTION_TYPE_MOVC,      // conditional mov
 	INSTRUCTION_TYPE_LOOP,
 	INSTRUCTION_TYPE_CALL,
 	INSTRUCTION_TYPE_RET,
 	INSTRUCTION_TYPE_ENTER,
 	INSTRUCTION_TYPE_INT,       // interrupt
 	INSTRUCTION_TYPE_BT,        // bit tests
 	INSTRUCTION_TYPE_BTS,
 	INSTRUCTION_TYPE_BTR,
 	INSTRUCTION_TYPE_BTC,
 	INSTRUCTION_TYPE_BSF,
 	INSTRUCTION_TYPE_BSR,
 	INSTRUCTION_TYPE_BSWAP,
 	INSTRUCTION_TYPE_SGDT,
 	INSTRUCTION_TYPE_SIDT,
	INSTRUCTION_TYPE_SLDT,
 	INSTRUCTION_TYPE_LFP,
 	INSTRUCTION_TYPE_CLD,
 	INSTRUCTION_TYPE_STD,
 	INSTRUCTION_TYPE_XLAT,
 	INSTRUCTION_TYPE_FCMOVC, // float conditional mov
 	INSTRUCTION_TYPE_FADD,
 	INSTRUCTION_TYPE_FADDP,
 	INSTRUCTION_TYPE_FIADD,
 	INSTRUCTION_TYPE_FSUB,
 	INSTRUCTION_TYPE_FSUBP,
 	INSTRUCTION_TYPE_FISUB,
 	INSTRUCTION_TYPE_FSUBR,
 	INSTRUCTION_TYPE_FSUBRP,
 	INSTRUCTION_TYPE_FISUBR,
 	INSTRUCTION_TYPE_FMUL,
 	INSTRUCTION_TYPE_FMULP,
 	INSTRUCTION_TYPE_FIMUL,
 	INSTRUCTION_TYPE_FDIV,
 	INSTRUCTION_TYPE_FDIVP,
 	INSTRUCTION_TYPE_FDIVR,
 	INSTRUCTION_TYPE_FDIVRP,
 	INSTRUCTION_TYPE_FIDIV,
 	INSTRUCTION_TYPE_FIDIVR,
 	INSTRUCTION_TYPE_FCOM,
 	INSTRUCTION_TYPE_FCOMP,
 	INSTRUCTION_TYPE_FCOMPP,
 	INSTRUCTION_TYPE_FCOMI,
 	INSTRUCTION_TYPE_FCOMIP,
 	INSTRUCTION_TYPE_FUCOM,
 	INSTRUCTION_TYPE_FUCOMP,
 	INSTRUCTION_TYPE_FUCOMPP,
 	INSTRUCTION_TYPE_FUCOMI,
	INSTRUCTION_TYPE_FUCOMIP,
 	INSTRUCTION_TYPE_FST,
 	INSTRUCTION_TYPE_FSTP,
 	INSTRUCTION_TYPE_FIST,
 	INSTRUCTION_TYPE_FISTP,
 	INSTRUCTION_TYPE_FISTTP,
 	INSTRUCTION_TYPE_FLD,
 	INSTRUCTION_TYPE_FILD,
 	INSTRUCTION_TYPE_FICOM,
 	INSTRUCTION_TYPE_FICOMP,
 	INSTRUCTION_TYPE_FFREE,
 	INSTRUCTION_TYPE_FFREEP,
 	INSTRUCTION_TYPE_FXCH,
 	INSTRUCTION_TYPE_SYSENTER,
 	INSTRUCTION_TYPE_FPU_CTRL, // FPU control instruction
 	INSTRUCTION_TYPE_FPU,       // Other FPU instructions
 	INSTRUCTION_TYPE_MMX,       // Other MMX instructions
 	INSTRUCTION_TYPE_SSE,       // Other SSE instructions
 	INSTRUCTION_TYPE_OTHER,     // Other instructions :-)
 	INSTRUCTION_TYPE_PRIV,      // Privileged instruction
};


